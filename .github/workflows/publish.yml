name: Publish tiles daily

on:
  schedule:
    # run later to give upstream time; adjust as needed
    - cron: '10 3 * * *'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Decide target date
        id: dates
        shell: bash
        run: |
          set -euo pipefail
          test -f snaps.json || echo "[]" > snaps.json
          last=$(jq -r '.[-1].label // empty' snaps.json)
          if [ -n "$last" ]; then
            target=$(date -u -d "$last + 1 day" +%F)
          else
            target=$(date -u -d "yesterday" +%F)
          fi
          echo "target=$target" | tee -a "$GITHUB_OUTPUT"

      - name: Find latest asset stem for that date (unauthenticated)
        id: find
        shell: bash
        run: |
          set -euo pipefail
          target="${{ steps.dates.outputs.target }}"
          echo "Looking for assets containing $target"
          # do NOT pass GITHUB_TOKEN to avoid 404 on other repos
          curl -sS https://api.github.com/repos/murolem/wplace-archives/releases?per_page=100 > releases.json

          jq -r --arg d "$target" '
            .[] | .assets[] | select(.name | test($d) and test("\\.tar\\.gz"))
            | {name: .name, url: .browser_download_url}
          ' releases.json > assets.json

          if [ ! -s assets.json ]; then
            echo "No matching assets for $target"
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          jq -r '
            . as $a | $a.name as $n
            | ($n | sub("\\.tar\\.gz\\.(?:[a-z]{2}|\\d{3})$";"") | sub("\\.tar\\.gz$";"")) as $stem
            | {stem:$stem, name:$a.name, url:$a.url}
          ' assets.json > withstems.json

          stem=$(jq -r 'sort_by(.name) | reverse | .[0].stem' withstems.json)
          echo "stem=$stem" >> "$GITHUB_OUTPUT"
          jq -r --arg s "$stem" 'select(.stem==$s) | .url' withstems.json > urls.txt
          echo "Selected URLs:"; cat urls.txt

      - name: Download assets
        if: steps.find.outputs.stem != ''
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p work
          cd work
          while read -r u; do
            echo "GET $u"
            curl -sS -L --fail -O "$u"
          done < ../urls.txt
          ls -l

      - name: Join (if split) â†’ archive.tar.gz
        if: steps.find.outputs.stem != ''
        shell: bash
        run: |
          set -euo pipefail
          cd work
          if ls *.tar.gz.* >/dev/null 2>&1; then
            cat $(ls -1 *.tar.gz.* | sort) > archive.tar.gz
          else
            mv *.tar.gz archive.tar.gz
          fi
          ls -lh archive.tar.gz

      - name: Extract Saudi rectangle (z=11 x=1243..1258, y=875..904)
        if: steps.find.outputs.stem != ''
        shell: bash
        run: |
          set -euo pipefail
          cd work
          target="${{ steps.dates.outputs.target }}"
          out="../tiles_$target"
          mkdir -p "$out"

          prefix=$(tar -tzf archive.tar.gz | head -1 | sed 's#/.*##')

          # accept either prefix/x/y.png or prefix/11/x/y.png
          tar -tzf archive.tar.gz | awk -v p="$prefix" '
            match($0, "^" p "/(11/)?([0-9]+)/([0-9]+)\\.png$", m) {
              x=m[2]+0; y=m[3]+0;
              if (x>=1243 && x<=1258 && y>=875 && y<=904) print $0;
            }
          ' > want.txt

          count=$(wc -l < want.txt)
          if [ "$count" -eq 0 ]; then
            echo "No tiles matched; sample listing:"
            tar -tzf archive.tar.gz | head -n 50
            exit 1
          fi

          tar -xzf archive.tar.gz --strip-components=1 -T want.txt -C "$out"
          echo "Extracted $count files into tiles_$target"

      - name: Update snaps.json
        if: steps.find.outputs.stem != ''
        shell: bash
        run: |
          set -euo pipefail
          target="${{ steps.dates.outputs.target }}"
          test -f snaps.json || echo "[]" > snaps.json
          tmp=snaps.json.new
          jq --arg d "$target" --arg dir "tiles_$target" '
            ( . // [] ) as $arr
            | if ($arr | map(.label) | index($d)) then $arr else ($arr + [{"label":$d,"dir":$dir}]) end
          ' snaps.json > "$tmp"
          mv "$tmp" snaps.json
          jq -r 'length' snaps.json | xargs -I{} echo "snaps.json now has {} entries"

      - name: Commit & push
        if: steps.find.outputs.stem != ''
        env:
          GIT_AUTHOR_NAME: github-actions
          GIT_AUTHOR_EMAIL: actions@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions
          GIT_COMMITTER_EMAIL: actions@users.noreply.github.com
        shell: bash
        run: |
          set -euo pipefail
          git add snaps.json tiles_*
          git commit -m "Add tiles for ${{ steps.dates.outputs.target }}" || exit 0
          git push
